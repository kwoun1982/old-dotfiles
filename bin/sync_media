#!/usr/bin/env bash

set -e
set -i

usage()
{
cat << EOF
sync_media version 1.0

sync_media allows you to quickly download from your camera and other devices and clear the storage.
So this tool allows you to sync from multiple origins to multiple destinations.

Process:
- sync from origins to to Destination 1.
- unmount origins
- sync from Destination 1 to Destination 2.

If Origin 1 or Destination 2 is not available we skip them


Usually your origins are:
- SD cards
- DVR
And your destinations can be:
- Local HD
- External HD

CONFIG FILE:

You need to set up a config file located by default in ~/.sync_mediarc

CONFIG FILE EXAMPLE:

  ORIGIN_NAME[1]="SD card"
  ORIGIN_PATH[1]="/Volumes/SD  Card/DCIM/"
  ORIGIN_SORT[1]="yes"
  ORIGIN_DFMT[1]="%Y-%m-%d/%%f.%%e"

  DEST_NAME[3]="HD"
  DEST_PATH[3]="$HOME/media/"



OPTIONS:
  -h      help
  -c      config file path
  -m      Move files from Destination 1 to Destination 2
  -n      Dry run 
  -V      Verbose

Example:
  sync_media 

EOF
}
# MAIN PROGRAM ##########################################

main() {
  sm_skipping
  sm_all1
  sm_all2
  destination1_sync
}



sm_skipping(){
  counter=0
  while [[ -n ${ORIGIN_NAME[$counter]} ]];
  do
    if [[ ! -d ${ORIGIN_PATH[$counter]} ]]; then
      echo "WARNING: Skipping ${ORIGIN_PATH[$counter]}"
    fi
    counter+=1
  done
}

sm_all1(){
  echo "# Syncing sources #"
  counter=0
  while [[ -n ${ORIGIN_NAME[$counter]} ]];
  do
    if [[ -d ${ORIGIN_PATH[$counter]} ]]; then 
      sm_each1 $counter
    fi
    counter+=1
  done
}

sm_all2(){
  echo "# Sorting #"
  counter=0
  while [[ -n ${ORIGIN_NAME[$counter]} ]];
  do
    sm_each2 $counter
    counter+=1
  done
}

# download and unmount each origin
# params:
# 1 counter
sm_each1(){
  sm_to_stage $1 #sync from origin to stage

  if [[ -n ${MOUNT_POINT[$1]} ]]; then
    sm_unmount $1
  fi
}

sm_each2(){ 
  if [[ -n ${ORIGIN_SORT[$1]} ]]; then
    sm_sort_stage $1 
  fi
  sm_to_destination $1
}

# sort on stage
sm_to_stage() { 
  media_sync ${ORIGIN_PATH[$1]} ${DEST_PATH[0]}${ORIGIN_NAME[$1]}/stage "--remove-source-files" 
}

sm_sort_stage(){
  local o=${DEST_PATH[0]}${ORIGIN_NAME[$1]}/stage/
  sm_mkdir $o
  brun "Sorting files with exiftool" "exiftool -r -d \"$o${ORIGIN_DFMT[$1]}\" \"-filename<filemodifydate\" \"$o\" "
}

sm_to_destination(){
  media_sync ${DEST_PATH[0]}${ORIGIN_NAME[$1]}/stage/ ${DEST_PATH[0]}${ORIGIN_NAME[$1]} "--remove-source-files --prune-empty-dirs"
}

sm_unmount(){ 
  brun "unmounting ${MOUNT_POINT[$1]}"  "$CMD_UMOUNT ${MOUNT_POINT[$1]}" 
}

media_sync(){
  sm_mkdir $2
  brun "Sync from $1 to $2"  "rsync -X -aP \"$1\" \"$2\" $3"
}

sm_mkdir() {
  if [[ ! -d $1 ]]; then 
    brun "creating destination dirs" "mkdir -p $1"
  fi
}


destination1_sync(){
  echo "# Syncing destination #"
  if [[ -d ${DEST_PATH[1]} ]]; then
    media_sync ${DEST_PATH[0]} ${DEST_PATH[1]} "--remove-source-files"
  fi
}

# MAIN PROGRAM ###################################################

### HELPERS ######################################################

# An exec wrapper that allows to echo the command and dry run.
# That way we can only echo commands and debug easily
#
# Takes two arguments
# $0 the nice message to show
# $1 the command to run
#
brun()
{
  if [[ -n $1 ]]; then         
    echo "  $1:"
  fi
  if [[ -n $VERBOSE ]] || [[ -z $DRY ]]; then 
    echo "  $2"
    echo ""
  fi
  if [[ -z $DRY ]]; then
    eval $2
  fi
}

read_params(){

  while getopts "hc:mnV" OPTION
  do
    case $OPTION in
      h) usage ; exit 1 ;;
      c) c=$OPTARG ;;
      m) m=true ;;
      n) DRY=true ;;
      V) VERBOSE=true ;;
  esac
  done
}

read_default_params(){
  export c=${c:-$HOME/.sync_media}
}

validate_config_file(){
  if [[ ! -e $c ]]; then
    echo "ERROR: config file missing!"
    exit 1
  fi
}

read_config() {
  validate_config_file
  source $c
  export ORIGIN_NAME
}


### HELPERS ######################################################

declare -i counter
declare -a -x ORIGIN_NAME
declare -a -x ORIGIN_PATH
declare -a -x ORIGIN_SORT
declare -a -x ORIGIN_DFMT
declare -a -x MOUNT_POINT
declare -a -x DEST_NAME
declare -a -x DEST_PATH
declare -a -x CMD_UMOUNT
declare -x c
declare -x m
declare -x DRY
declare -x VERBOSE

read_params "${@}"
read_default_params
read_config

main
