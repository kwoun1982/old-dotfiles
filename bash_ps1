#!/bin/bash

# Colors
CLR="\[\033[00m\]"  # Remove all colour formatting
BLACK="\[\e[0;30m\]"
GRAY="\[\e[1;30m\]"
RED="\[\e[0;31m\]"
LRED="\[\e[1;31m\]"
GREEN="\[\e[0;32m\]"
LGREEN="\[\e[1;32m\]"
ORANGE="\[\e[0;33m\]"
LORANGE="\[\e[1;33m\]"
PURPLE="\[\e[0;34m\]"
LPURPLE="\[\e[1;34m\]"
MAGENTA="\[\e[0;35m\]"
LMAGENTA="\[\e[1;35m\]"
CYAN="\[\e[0;36m\]"
LCYAN="\[\e[1;36m\]"
WHITE="\[\e[0;37m\]"
LWHITE="\[\e[1;37m\]"

function parse_git_dirty {
  local w=""
  local i=""
  local s=""
  local u=""

  if [ "$(git config --bool bash.showDirtyState)" != "false" ]; then
    git diff --no-ext-diff --quiet --exit-code || w="⚡ "
    if git rev-parse --quiet --verify HEAD >/dev/null; then
      git diff-index --cached --quiet HEAD -- || i="✚ "
    else
      i="#"
    fi
  fi

  git rev-parse --verify refs/stash >/dev/null 2>&1 && s="⦿ " #Show stash state

  if [ -n "$(git ls-files --others --exclude-standard)" ]; then #Show untracked files
    u="✘ "
  fi
  echo " $w$i$s$u"
}

function parse_git_branch {
  local branch=$(__git_ps1 "%s")
  [[ $branch ]] && echo "$(tput bold)$(tput setaf 7)on $(tput sgr 0 1)$(tput setaf 5)$branch$(tput sgr0)$(tput bold)$(tput setaf 3)$(parse_git_dirty)"
}

PS1="\n${LWHITE}⚗ ${LCYAN}\u ${LWHITE}at ${ORANGE}\h ${LWHITE}in ${LGREEN}\w \$(parse_git_branch)${LORANGE}\n¢ ${CLR}"
PS2="${LORANGE}> ${CLR}"
